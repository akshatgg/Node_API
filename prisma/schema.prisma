// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  developer
  normal
}

enum UserGender {
  male
  female
  other
}

model User {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  email           String           @unique
  password        String
  firstName       String
  lastName        String?
  phone           String?
  gender          UserGender
  address         String?
  pin             String?
  aadhaar         String?
  pan             String?
  dob             DateTime?
  verified        Boolean          @default(false)
  userType        UserType         @default(normal)
  otps            Otp[]
  businessProfile BusinessProfile?
  invoices        Invoice[]
  categories      Category[]
  items           Item[]
  parties         Party[]
}

model Otp {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  otp       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  used      Boolean  @default(false)
}

model BusinessProfile {
  id            Int      @unique @default(autoincrement())
  businessName  String
  pan           String?
  tan           String?
  gstin         String?
  address       String?
  bankName      String?
  bankAccountNo String?
  bankIfsc      String?
  bankBranch    String?
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

enum PartyType {
  customer
  supplier
}

model Party {
  id                String    @id @unique @default(uuid())
  partyName         String
  type              PartyType
  gstin             String?
  pan               String?
  tan               String?
  upi               String?
  email             String?
  phone             String?
  address           String?
  bankName          String?
  bankAccountNumber String?
  bankIfsc          String?
  bankBranch        String?
  invoices          Invoice[]
  items             Item[]
  userId            Int
  user              User      @relation(fields: [userId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
}

model Category {
  id           String @id @unique @default(uuid())
  categoryName String
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
  items        Item[]
}

enum ItemUnit {
  pieces
  grams
  kilograms
  liters
  milliliters
  meters
  centimeters
  inches
  feet
  squareMeters
  squareFeet
  cubicMeters
  cubicFeet
  dozen
  pack
  carton
  box
  roll
  bundle
  pair
  set
}

model Item {
  id            String        @id @unique @default(uuid())
  itemName      String
  unit          ItemUnit      @default(pieces)
  price         Decimal
  openingStock  Decimal?
  closingStock  Decimal?
  purchasePrice Decimal?
  cgst          Decimal?
  sgst          Decimal?
  igst          Decimal?
  utgst         Decimal?
  taxExempted   Boolean       @default(false)
  description   String?
  hsnCode       String?
  categoryId    String?
  category      Category?     @relation(fields: [categoryId], references: [id])
  supplierId    String?
  supplier      Party?        @relation(fields: [supplierId], references: [id])
  invoiceItems  InvoiceItem[]
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

enum InvoiceType {
  sales
  purchase
  sales_return
  purchase_return
}

model Invoice {
  id            String        @id @unique @default(uuid())
  invoiceNumber Int
  type          InvoiceType
  partyId       String
  party         Party         @relation(fields: [partyId], references: [id])
  phone         String?
  partyName     String?
  totalAmount   Float
  totalGst      Float?
  stateOfSupply String
  cgst          Float?
  sgst          Float?
  igst          Float?
  utgst         Float?
  details       String?
  extraDetails  String?
  items         InvoiceItem[]
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model InvoiceItem {
  id        String  @id @unique @default(uuid())
  itemId    String
  item      Item    @relation(fields: [itemId], references: [id])
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}

model Profile {
  Id             Int      @unique @default(autoincrement())
  name           String?
  email          String?
  phoneNumber    String?
  businessName   String
  contactAddress String
  gstin          String?
  paymentDetails String?
  notes          String
  logo           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Library {
  id                  Int      @unique @default(autoincrement())
  pan                 String
  section             String
  sub_section         String?
  subject             String
  ao_order            String
  itat_no             String
  rsa_no              String?
  bench               String
  appeal_no           String?
  appellant           String?
  respondent          String
  appeal_type         String
  appeal_filed_by     String
  order_result        String
  tribunal_order_date String
  assessment_year     String
  judgment            String
  conclusion          String
  download            String
  upload              String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}
