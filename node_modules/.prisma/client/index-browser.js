
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "b20ead4d3ab9e78ac112966e242ded703f4a052c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  fatherName: 'fatherName',
  phone: 'phone',
  gender: 'gender',
  address: 'address',
  pin: 'pin',
  aadhaar: 'aadhaar',
  pan: 'pan',
  dob: 'dob',
  avatar: 'avatar',
  adminId: 'adminId',
  superadminId: 'superadminId',
  verified: 'verified',
  userType: 'userType'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  otp: 'otp',
  userId: 'userId',
  used: 'used'
};

exports.Prisma.BusinessProfileScalarFieldEnum = {
  id: 'id',
  businessName: 'businessName',
  pan: 'pan',
  tan: 'tan',
  gstin: 'gstin',
  address: 'address',
  bankName: 'bankName',
  bankAccountNo: 'bankAccountNo',
  bankIfsc: 'bankIfsc',
  bankBranch: 'bankBranch',
  state: 'state',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isAddressVerified: 'isAddressVerified',
  isBusinessNameVerified: 'isBusinessNameVerified',
  isGstinVerified: 'isGstinVerified',
  isPanVerified: 'isPanVerified',
  isStateVerified: 'isStateVerified'
};

exports.Prisma.LedgerScalarFieldEnum = {
  id: 'id',
  ledgerName: 'ledgerName',
  openingBalance: 'openingBalance',
  balance: 'balance',
  userId: 'userId',
  partyId: 'partyId',
  year: 'year',
  month: 'month',
  ledgerType: 'ledgerType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JournalEntryScalarFieldEnum = {
  id: 'id',
  entryDate: 'entryDate',
  description: 'description',
  userId: 'userId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  ledgerId: 'ledgerId',
  journalEntryId: 'journalEntryId',
  amount: 'amount',
  transactionType: 'transactionType',
  userId: 'userId'
};

exports.Prisma.PartyScalarFieldEnum = {
  id: 'id',
  partyName: 'partyName',
  type: 'type',
  gstin: 'gstin',
  pan: 'pan',
  tan: 'tan',
  upi: 'upi',
  email: 'email',
  phone: 'phone',
  address: 'address',
  bankName: 'bankName',
  bankAccountNumber: 'bankAccountNumber',
  bankIfsc: 'bankIfsc',
  bankBranch: 'bankBranch',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  userId: 'userId'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  itemName: 'itemName',
  unit: 'unit',
  price: 'price',
  openingStock: 'openingStock',
  closingStock: 'closingStock',
  purchasePrice: 'purchasePrice',
  gst: 'gst',
  taxExempted: 'taxExempted',
  description: 'description',
  hsnCode: 'hsnCode',
  categoryId: 'categoryId',
  supplierId: 'supplierId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  type: 'type',
  totalAmount: 'totalAmount',
  totalGst: 'totalGst',
  stateOfSupply: 'stateOfSupply',
  cgst: 'cgst',
  sgst: 'sgst',
  igst: 'igst',
  utgst: 'utgst',
  details: 'details',
  extraDetails: 'extraDetails',
  modeOfPayment: 'modeOfPayment',
  credit: 'credit',
  userId: 'userId',
  partyId: 'partyId',
  gstNumber: 'gstNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  quantity: 'quantity',
  discount: 'discount',
  invoiceId: 'invoiceId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  serviceType: 'serviceType',
  imgUrl: 'imgUrl',
  description: 'description',
  price: 'price',
  gst: 'gst',
  documents: 'documents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  services: 'services',
  status: 'status',
  price: 'price',
  gst: 'gst',
  orderTotal: 'orderTotal',
  stateOfSupply: 'stateOfSupply',
  userId: 'userId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  razorpay_order_id: 'razorpay_order_id',
  razorpay_payment_id: 'razorpay_payment_id',
  status: 'status',
  userId: 'userId',
  orderId: 'orderId'
};

exports.Prisma.LibraryScalarFieldEnum = {
  id: 'id',
  pan: 'pan',
  section: 'section',
  sub_section: 'sub_section',
  subject: 'subject',
  ao_order: 'ao_order',
  itat_no: 'itat_no',
  rsa_no: 'rsa_no',
  bench: 'bench',
  appeal_no: 'appeal_no',
  appellant: 'appellant',
  respondent: 'respondent',
  appeal_type: 'appeal_type',
  appeal_filed_by: 'appeal_filed_by',
  order_result: 'order_result',
  tribunal_order_date: 'tribunal_order_date',
  assessment_year: 'assessment_year',
  judgment: 'judgment',
  conclusion: 'conclusion',
  download: 'download',
  upload: 'upload',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  contentheading: 'contentheading',
  contentdiscription: 'contentdiscription',
  category: 'category',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountName: 'accountName',
  totalDebit: 'totalDebit',
  totalCredit: 'totalCredit',
  debitBalance: 'debitBalance',
  creditBalance: 'creditBalance',
  date: 'date',
  userId: 'userId'
};

exports.Prisma.CareerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  pin: 'pin',
  email: 'email',
  mobile: 'mobile',
  skills: 'skills',
  gender: 'gender',
  cv: 'cv',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillrecieveScalarFieldEnum = {
  id: 'id',
  billNumber: 'billNumber',
  amount: 'amount',
  tax: 'tax',
  customerName: 'customerName',
  customerAddress: 'customerAddress',
  contact: 'contact',
  itemQuantity: 'itemQuantity',
  itemPrice: 'itemPrice',
  itemDescription: 'itemDescription',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  dueDate: 'dueDate',
  comment: 'comment'
};

exports.Prisma.BillpayableScalarFieldEnum = {
  id: 'id',
  supplierName: 'supplierName',
  supplierAddress: 'supplierAddress',
  contact: 'contact',
  billDate: 'billDate',
  dueDate: 'dueDate',
  billAmount: 'billAmount',
  billNumber: 'billNumber',
  billDiscription: 'billDiscription',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  paymentDate: 'paymentDate',
  paymentAmount: 'paymentAmount',
  tax: 'tax',
  comment: 'comment',
  invoiceNumber: 'invoiceNumber'
};

exports.Prisma.UploadedDocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fileName: 'fileName',
  applicationId: 'applicationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoanDocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  shortName: 'shortName',
  mandatory: 'mandatory',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoanScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  shortName: 'shortName',
  description: 'description',
  maxAmount: 'maxAmount',
  minAmount: 'minAmount',
  interest: 'interest',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoanApplicationScalarFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  loanAmount: 'loanAmount',
  loanStatus: 'loanStatus',
  applicantName: 'applicantName',
  applicantAge: 'applicantAge',
  loanType: 'loanType',
  applicantGender: 'applicantGender',
  nationality: 'nationality',
  description: 'description',
  salaried: 'salaried',
  bankAccountId: 'bankAccountId',
  phone: 'phone',
  email: 'email',
  address: 'address',
  permanentAddress: 'permanentAddress',
  userId: 'userId',
  agentId: 'agentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankDetailsScalarFieldEnum = {
  id: 'id',
  accountHolderName: 'accountHolderName',
  bankName: 'bankName',
  bankAccountNo: 'bankAccountNo',
  bankIfsc: 'bankIfsc',
  bankBranch: 'bankBranch',
  bankAccountType: 'bankAccountType',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InsuranceScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  mobile: 'mobile',
  email: 'email',
  address: 'address',
  dob: 'dob',
  maritalStatus: 'maritalStatus',
  gender: 'gender',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agentId: 'agentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VisitorScalarFieldEnum = {
  id: 'id',
  count: 'count',
  createdAt: 'createdAt'
};

exports.Prisma.RegisterStartupScalarFieldEnum = {
  id: 'id',
  title: 'title',
  image: 'image',
  userId: 'userId',
  categories: 'categories'
};

exports.Prisma.ContactUsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  message: 'message',
  phoneNumber: 'phoneNumber',
  userId: 'userId'
};

exports.Prisma.AboutScalarFieldEnum = {
  id: 'id',
  name: 'name',
  position: 'position',
  image: 'image',
  description: 'description'
};

exports.Prisma.Gstr1_4AScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  LegalName: 'LegalName',
  GSTN: 'GSTN',
  pos: 'pos',
  invoice_No: 'invoice_No',
  invoice_date: 'invoice_date',
  invoice_value: 'invoice_value',
  rate: 'rate',
  nature: 'nature',
  source: 'source',
  cgst: 'cgst',
  igst: 'igst',
  sgst: 'sgst',
  supply_type: 'supply_type',
  fy: 'fy',
  period: 'period',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Gstr1_5AScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pos: 'pos',
  invoice_No: 'invoice_No',
  supply_type: 'supply_type',
  invoice_date: 'invoice_date',
  invoice_value: 'invoice_value',
  total_invoice_value: 'total_invoice_value'
};

exports.Prisma.Gstr1_5A_itemScalarFieldEnum = {
  id: 'id',
  SN: 'SN',
  turnover: 'turnover',
  cgst: 'cgst',
  sgst: 'sgst',
  gstr1_5A_id: 'gstr1_5A_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  fatherName: 'fatherName',
  phone: 'phone',
  address: 'address',
  pin: 'pin',
  aadhaar: 'aadhaar',
  pan: 'pan',
  avatar: 'avatar'
};

exports.Prisma.OtpOrderByRelevanceFieldEnum = {
  otp: 'otp'
};

exports.Prisma.BusinessProfileOrderByRelevanceFieldEnum = {
  businessName: 'businessName',
  pan: 'pan',
  tan: 'tan',
  gstin: 'gstin',
  address: 'address',
  bankName: 'bankName',
  bankAccountNo: 'bankAccountNo',
  bankIfsc: 'bankIfsc',
  bankBranch: 'bankBranch',
  state: 'state'
};

exports.Prisma.LedgerOrderByRelevanceFieldEnum = {
  id: 'id',
  ledgerName: 'ledgerName',
  partyId: 'partyId'
};

exports.Prisma.JournalEntryOrderByRelevanceFieldEnum = {
  id: 'id',
  description: 'description'
};

exports.Prisma.TransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  ledgerId: 'ledgerId',
  journalEntryId: 'journalEntryId'
};

exports.Prisma.PartyOrderByRelevanceFieldEnum = {
  id: 'id',
  partyName: 'partyName',
  gstin: 'gstin',
  pan: 'pan',
  tan: 'tan',
  upi: 'upi',
  email: 'email',
  phone: 'phone',
  address: 'address',
  bankName: 'bankName',
  bankAccountNumber: 'bankAccountNumber',
  bankIfsc: 'bankIfsc',
  bankBranch: 'bankBranch'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  categoryName: 'categoryName'
};

exports.Prisma.ItemOrderByRelevanceFieldEnum = {
  id: 'id',
  itemName: 'itemName',
  description: 'description',
  hsnCode: 'hsnCode',
  categoryId: 'categoryId',
  supplierId: 'supplierId'
};

exports.Prisma.InvoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  stateOfSupply: 'stateOfSupply',
  details: 'details',
  extraDetails: 'extraDetails',
  partyId: 'partyId',
  gstNumber: 'gstNumber'
};

exports.Prisma.InvoiceItemOrderByRelevanceFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  invoiceId: 'invoiceId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  serviceType: 'serviceType',
  imgUrl: 'imgUrl',
  description: 'description'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  stateOfSupply: 'stateOfSupply'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  razorpay_order_id: 'razorpay_order_id',
  razorpay_payment_id: 'razorpay_payment_id'
};

exports.Prisma.LibraryOrderByRelevanceFieldEnum = {
  pan: 'pan',
  section: 'section',
  sub_section: 'sub_section',
  subject: 'subject',
  ao_order: 'ao_order',
  itat_no: 'itat_no',
  rsa_no: 'rsa_no',
  bench: 'bench',
  appeal_no: 'appeal_no',
  appellant: 'appellant',
  respondent: 'respondent',
  appeal_type: 'appeal_type',
  appeal_filed_by: 'appeal_filed_by',
  order_result: 'order_result',
  tribunal_order_date: 'tribunal_order_date',
  assessment_year: 'assessment_year',
  judgment: 'judgment',
  conclusion: 'conclusion',
  download: 'download',
  upload: 'upload'
};

exports.Prisma.PostOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  contentheading: 'contentheading',
  contentdiscription: 'contentdiscription',
  category: 'category',
  imageUrl: 'imageUrl'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  accountName: 'accountName'
};

exports.Prisma.CareerOrderByRelevanceFieldEnum = {
  name: 'name',
  address: 'address',
  pin: 'pin',
  email: 'email',
  mobile: 'mobile',
  skills: 'skills',
  cv: 'cv'
};

exports.Prisma.BillrecieveOrderByRelevanceFieldEnum = {
  billNumber: 'billNumber',
  amount: 'amount',
  tax: 'tax',
  customerName: 'customerName',
  customerAddress: 'customerAddress',
  contact: 'contact',
  itemQuantity: 'itemQuantity',
  itemPrice: 'itemPrice',
  itemDescription: 'itemDescription',
  dueDate: 'dueDate',
  comment: 'comment'
};

exports.Prisma.BillpayableOrderByRelevanceFieldEnum = {
  supplierName: 'supplierName',
  supplierAddress: 'supplierAddress',
  contact: 'contact',
  billDate: 'billDate',
  dueDate: 'dueDate',
  billAmount: 'billAmount',
  billNumber: 'billNumber',
  billDiscription: 'billDiscription',
  transactionId: 'transactionId',
  paymentDate: 'paymentDate',
  paymentAmount: 'paymentAmount',
  tax: 'tax',
  comment: 'comment',
  invoiceNumber: 'invoiceNumber'
};

exports.Prisma.UploadedDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  applicationId: 'applicationId'
};

exports.Prisma.LoanDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  shortName: 'shortName',
  description: 'description'
};

exports.Prisma.LoanOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  shortName: 'shortName',
  description: 'description'
};

exports.Prisma.LoanApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  loanId: 'loanId',
  applicantName: 'applicantName',
  description: 'description',
  bankAccountId: 'bankAccountId',
  phone: 'phone',
  email: 'email',
  address: 'address',
  permanentAddress: 'permanentAddress',
  agentId: 'agentId'
};

exports.Prisma.BankDetailsOrderByRelevanceFieldEnum = {
  id: 'id',
  accountHolderName: 'accountHolderName',
  bankName: 'bankName',
  bankAccountNo: 'bankAccountNo',
  bankIfsc: 'bankIfsc',
  bankBranch: 'bankBranch'
};

exports.Prisma.InsuranceOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  mobile: 'mobile',
  email: 'email',
  address: 'address',
  maritalStatus: 'maritalStatus'
};

exports.Prisma.ClientOrderByRelevanceFieldEnum = {
  id: 'id',
  agentId: 'agentId'
};

exports.Prisma.AgentOrderByRelevanceFieldEnum = {
  id: 'id'
};

exports.Prisma.RegisterStartupOrderByRelevanceFieldEnum = {
  title: 'title',
  image: 'image'
};

exports.Prisma.ContactUsOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  message: 'message',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.AboutOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  position: 'position',
  image: 'image',
  description: 'description'
};

exports.Prisma.Gstr1_4AOrderByRelevanceFieldEnum = {
  LegalName: 'LegalName',
  GSTN: 'GSTN',
  pos: 'pos',
  invoice_No: 'invoice_No',
  invoice_date: 'invoice_date',
  invoice_value: 'invoice_value',
  rate: 'rate',
  nature: 'nature',
  source: 'source',
  cgst: 'cgst',
  igst: 'igst',
  sgst: 'sgst',
  supply_type: 'supply_type',
  fy: 'fy',
  period: 'period'
};

exports.Prisma.Gstr1_5AOrderByRelevanceFieldEnum = {
  pos: 'pos',
  invoice_No: 'invoice_No',
  supply_type: 'supply_type',
  invoice_date: 'invoice_date',
  invoice_value: 'invoice_value',
  total_invoice_value: 'total_invoice_value'
};

exports.Prisma.Gstr1_5A_itemOrderByRelevanceFieldEnum = {
  SN: 'SN',
  turnover: 'turnover',
  cgst: 'cgst',
  sgst: 'sgst'
};
exports.UserGender = {
  male: 'male',
  female: 'female',
  other: 'other'
};

exports.UserType = {
  admin: 'admin',
  normal: 'normal',
  agent: 'agent',
  superadmin: 'superadmin'
};

exports.LedgerType = {
  bank: 'bank',
  cash: 'cash',
  purchase: 'purchase',
  sales: 'sales',
  directExpense: 'directExpense',
  indirectExpense: 'indirectExpense',
  directIncome: 'directIncome',
  indirectIncome: 'indirectIncome',
  fixedAssets: 'fixedAssets',
  currentAssets: 'currentAssets',
  loansAndLiabilities: 'loansAndLiabilities',
  accountsReceivable: 'accountsReceivable',
  accountsPayable: 'accountsPayable'
};

exports.TransactionType = {
  credit: 'credit',
  debit: 'debit'
};

exports.PartyType = {
  customer: 'customer',
  supplier: 'supplier'
};

exports.ItemUnit = {
  pieces: 'pieces',
  grams: 'grams',
  kilograms: 'kilograms',
  liters: 'liters',
  milliliters: 'milliliters',
  meters: 'meters',
  centimeters: 'centimeters',
  inches: 'inches',
  feet: 'feet',
  squareMeters: 'squareMeters',
  squareFeet: 'squareFeet',
  cubicMeters: 'cubicMeters',
  cubicFeet: 'cubicFeet',
  dozen: 'dozen',
  pack: 'pack',
  carton: 'carton',
  box: 'box',
  roll: 'roll',
  bundle: 'bundle',
  pair: 'pair',
  set: 'set'
};

exports.InvoiceType = {
  sales: 'sales',
  purchase: 'purchase',
  sales_return: 'sales_return',
  purchase_return: 'purchase_return'
};

exports.ModeOfPayment = {
  cash: 'cash',
  bank: 'bank',
  upi: 'upi',
  credit: 'credit'
};

exports.InvoiceStatus = {
  unpaid: 'unpaid',
  paid: 'paid',
  overdue: 'overdue'
};

exports.OrderStatus = {
  initiated: 'initiated',
  pending: 'pending',
  success: 'success',
  failure: 'failure',
  usercancelled: 'usercancelled',
  dropped: 'dropped',
  bounced: 'bounced'
};

exports.PaymentStatus = {
  created: 'created',
  success: 'success',
  failed: 'failed'
};

exports.paymentStatus = {
  paid: 'paid',
  unpaid: 'unpaid',
  overdue: 'overdue'
};

exports.paymentMethod = {
  cash: 'cash',
  creditcard: 'creditcard',
  upi: 'upi',
  netbanking: 'netbanking',
  cheque: 'cheque'
};

exports.DocumentType = {
  pdf: 'pdf',
  image: 'image',
  other: 'other'
};

exports.LoanType = {
  personal: 'personal',
  education: 'education',
  home: 'home',
  business: 'business',
  car: 'car',
  property: 'property'
};

exports.LoanStatus = {
  pending: 'pending',
  processing: 'processing',
  review: 'review',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.Nationality = {
  resident: 'resident',
  nri: 'nri',
  foreign: 'foreign'
};

exports.BankAccountType = {
  savings: 'savings',
  current: 'current',
  nri: 'nri',
  fcnr: 'fcnr',
  rd: 'rd',
  fd: 'fd',
  salary: 'salary'
};

exports.StartupCategory = {
  registration: 'registration',
  companyRegistration: 'companyRegistration',
  returns: 'returns',
  audits: 'audits'
};

exports.Prisma.ModelName = {
  User: 'User',
  Otp: 'Otp',
  BusinessProfile: 'BusinessProfile',
  Ledger: 'Ledger',
  JournalEntry: 'JournalEntry',
  Transaction: 'Transaction',
  Party: 'Party',
  Category: 'Category',
  Item: 'Item',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Service: 'Service',
  Order: 'Order',
  Payment: 'Payment',
  Library: 'Library',
  Post: 'Post',
  Account: 'Account',
  Career: 'Career',
  Billrecieve: 'Billrecieve',
  Billpayable: 'Billpayable',
  UploadedDocument: 'UploadedDocument',
  LoanDocument: 'LoanDocument',
  Loan: 'Loan',
  LoanApplication: 'LoanApplication',
  BankDetails: 'BankDetails',
  Insurance: 'Insurance',
  Client: 'Client',
  Agent: 'Agent',
  Visitor: 'Visitor',
  RegisterStartup: 'RegisterStartup',
  ContactUs: 'ContactUs',
  About: 'About',
  Gstr1_4A: 'Gstr1_4A',
  Gstr1_5A: 'Gstr1_5A',
  Gstr1_5A_item: 'Gstr1_5A_item'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
